7-4 字符串字母大小写转换 （15 分）
本题要求编写程序，对一个以“#”结束的字符串，将其小写字母全部转换成大写字母，把大写字母全部转换成小写字母，其他字符不变输出。
输入格式：
输入为一个以“#”结束的字符串（不超过30个字符）。
输出格式：
在一行中输出大小写转换后的结果字符串。
输入样例：
Hello World! 123#
输出样例：
hELLO wORLD! 123


我的做法
#include<stdio.h>
#include<string.h>

int main(void) {
	int i;
	char str[50] = { 0 };
	char ch;
	ch = getchar();
	for (i = 0;ch != '#';i++) {
		str[i] = ch;//一定要赋值，不然没有输出
		ch = getchar();
	}
	for (i = 0;i < strlen(str);i++) {
		if (str[i] >= 'A'&&str[i] <= 'Z')
			str[i] = str[i] + 32;
		else if (str[i] >= 'a'&&str[i] <= 'z')//必须用else if 用if的话在执行第一个if时，改变了str[i]的值使其满足下一个if的条件 
			str[i] = str[i] - 32;
		//else
			//str[i] = str[i];
	}
	puts(str);
	return 0;
}


然而 老师高级做法
#include<stdio.h>
int main()
{
	char s[105];
	int i;
	gets(s);
	for (i = 0;s[i];i++)
		if (s[i] >= 'a'&&s[i] <= 'z')
			s[i] = s[i] - 'a' + 'A';
		else if (s[i] >= 'A'&&s[i] <= 'Z')
			s[i] = s[i] - 'A' + 'a';
	s[i - 1] = 0;
	printf("%s\n", s);
	return 0;
}

并没有看懂。。。过几天再回来看看








7-5 求矩阵的局部极大值 （15 分）
给定M行N列的整数矩阵A，如果A的非边界元素A[i][j]大于相邻的上下左右4个元素，那么就称元素A[i][j]是矩阵的局部极大值。本题要求给定矩阵的全部局部极大值及其所在的位置。
输入格式：
输入在第一行中给出矩阵A的行数M和列数N（3≤M,N≤20）；最后M行，每行给出A在该行的N个元素的值。数字间以空格分隔。
输出格式：
每行按照“元素值 行号 列号”的格式输出一个局部极大值，其中行、列编号从1开始。要求按照行号递增输出；若同行有超过1个局部极大值，则该行按列号递增输出。若没有局部极大值，则输出“None 总行数 总列数”。

#include<stdio.h>
int main()
{
    int a[50][50],i,j,n,m,f=0;//利用F来实现我原来认为是count的功能
    scanf("%d%d",&n,&m);
    for(i=1;i<=n;i++)
        for(j=1;j<=m;j++)
            scanf("%d",&a[i][j]);

    for(i=2;i<n;i++)
        for(j=2;j<m;j++)
            if(a[i][j]>a[i][j-1]&&a[i][j]>a[i-1][j]&&a[i][j]>a[i+1][j]&&a[i][j]>a[i][j+1])
            {
                f=1;
                printf("%d %d %d\n",a[i][j],i,j);
            }
    
    if(f!=1)//妙妙妙嘻嘻嘻
        printf("None %d %d\n",n,m);
    return 0;
}





7-3 统计素数并求和 （20 分）
本题要求统计给定整数M和N区间内素数的个数并对它们求和。
输入格式:
输入在一行中给出两个正整数M和N（1≤M≤N≤500）。
输出格式:
在一行中顺序输出M和N区间内素数的个数以及它们的和，数字间以空格分隔。


#include<stdio.h>

int prime(int x);
int main(void)
{
	int m, n, i,sum = 0,count = 0;
	scanf("%d %d", &m, &n);
	for (i = m;i <= n;i++) {
		if (prime(i) == 1) {
			sum += i;
			count++;
		}
	}
	printf("%d %d", count, sum);
	return 0;
}
int prime(int x)
{
	int j;
	if (1 == x)//先判断1的情况
		return 0;
	for (j = 2;j*j <= x;j++) {
		if (x%j == 0) 
			return 0;//直接返回值，简单
	}
	return 1;


}

